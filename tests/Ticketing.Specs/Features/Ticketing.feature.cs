// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ticketing.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TicketingFeature : object, Xunit.IClassFixture<TicketingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Ticketing.feature"
#line hidden
        
        public TicketingFeature(TicketingFeature.FixtureData fixtureData, Ticketing_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Ticketing", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Ticket")]
        [Xunit.TraitAttribute("FeatureTitle", "Ticketing")]
        [Xunit.TraitAttribute("Description", "Create Ticket")]
        [Xunit.TraitAttribute("Category", "TEST_ME-3")]
        [Xunit.TraitAttribute("Category", "TESTSET_ME-4")]
        public void CreateTicket()
        {
            string[] tagsOfScenario = new string[] {
                    "TEST_ME-3",
                    "TESTSET_ME-4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Ticket", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Name",
                            "AccountNumber",
                            "AccountName",
                            "MeterNumber",
                            "Address",
                            "ContactNumber",
                            "OtherDetails",
                            "ORNumber",
                            "Photos",
                            "Status"});
                table1.AddRow(new string[] {
                            "Complaints",
                            "No Water",
                            "1234321",
                            "Nino",
                            "4321234",
                            "Purok 5",
                            "09121212121",
                            "Nothing",
                            "54321",
                            "https://wallpapercave.com/wp/wp10279812.jpg",
                            "For Approval"});
                table1.AddRow(new string[] {
                            "Complaints",
                            "Leakage",
                            "1234532",
                            "Moonshot",
                            "3456788",
                            "Brgy 3",
                            "09676181219",
                            "just a test bruh",
                            "32111",
                            "https://www.waterindustryjournal.co.uk/wp-content/uploads/2018/02/burst-pipe.jpeg" +
                                "",
                            "For Approval"});
#line 8
  testRunner.When("customer fills all the following datas and submits the form", ((string)(null)), table1, "When ");
#line hidden
#line 12
  testRunner.Then("a ticket should be succesfully created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Display details of a ticket")]
        [Xunit.TraitAttribute("FeatureTitle", "Ticketing")]
        [Xunit.TraitAttribute("Description", "Display details of a ticket")]
        [Xunit.TraitAttribute("Category", "TEST_ME-7")]
        [Xunit.TraitAttribute("Category", "TESTSET_ME-4")]
        public void DisplayDetailsOfATicket()
        {
            string[] tagsOfScenario = new string[] {
                    "TEST_ME-7",
                    "TESTSET_ME-4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display details of a ticket", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Type",
                            "Name",
                            "AccountNumber",
                            "AccountName",
                            "MeterNumber",
                            "Address",
                            "ContactNumber",
                            "OtherDetails",
                            "ORNumber",
                            "Photos",
                            "Status"});
                table2.AddRow(new string[] {
                            "63c646b0eb34447850246068",
                            "Test Complaint",
                            "No Water",
                            "12345678",
                            "Jm Albasin",
                            "87654321",
                            "C.M Recto Ext.",
                            "09676181217",
                            "Just a test",
                            "0987654321",
                            "https://wallpapercave.com/wp/wp10279812.jpg",
                            "For Approval"});
                table2.AddRow(new string[] {
                            "63c646b0eb34447850246069",
                            "Test Complaint 2",
                            "Water Leak",
                            "12345678",
                            "Jm Albasin",
                            "87654321",
                            "C.M Recto Ext.",
                            "09676181217",
                            "Just a test",
                            "0987654321",
                            "https://imageio.forbes.com/blogs-images/natalieparletta/files/2019/06/AdobeStock_" +
                                "234736184-by-manola72-1200x800.jpg?format=jpg&width=960",
                            "For Approval"});
#line 15
  testRunner.Given("the following datas are already submitted", ((string)(null)), table2, "Given ");
#line hidden
#line 20
  testRunner.When("I view a ticket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
  testRunner.Then("display all information of the ticket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TicketingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TicketingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
